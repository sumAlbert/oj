#!/usr/bin/env node

const app = require('../server/app');
const debug = require('debug')('oj:Debug');
const http = require('http');


const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe${port}`
    : `Port${port}`;

  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevalted privileges`);
      process.exit(1);//eslint-disable-line
      break;
    case 'EADDRINUSE':
      debug(`${bind} is already in use`);
      process.exit(1);//eslint-disable-line
      break;
    default:
      throw error;
  }
};

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

/**
 * Normalize a port into a number, string or false
 * @param val
 * @returns {*}
 */
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port
  }

  return false;
};


const port = normalizePort(process.env.PORT || '3000');//eslint-disable-line
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

